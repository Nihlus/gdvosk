[gd_scene load_steps=4 format=3 uid="uid://cxyg85rb1s852"]

[ext_resource type="VoskModel" path="res://vosk-model-small-en-us-0.15.vosk" id="1_bqtus"]

[sub_resource type="GDScript" id="GDScript_mc2fg"]
script/source = "extends Node3D

@onready var speech_recognizer := $SpeechRecognizer as SpeechRecognizer
@onready var player := $AudioStreamPlayer as AudioStreamPlayer
@onready var effect :=  AudioServer.get_bus_effect(AudioServer.get_bus_index(\"Record\"), 0) as AudioEffectCapture

func _ready() -> void:
    var model := load(\"res://vosk-model-small-en-us-0.15.vosk\") as VoskModel
    var stream := load(\"res://test-mono-44100.wav\") as AudioStreamWAV

    var samples : PackedVector2Array
    var file := FileAccess.open(\"res://test-stereo-44100.raw\", FileAccess.READ)
    while file.get_position() < file.get_length():
        samples.push_back(Vector2(file.get_float(), file.get_float()))

    var recognizer = VoskRecognizer.new()
    recognizer.setup(model, 44100, null)

    recognizer.accept_samples(samples)
    print(recognizer.get_final_result())

    recognizer.reset()

    recognizer.accept_stream(stream)
    print(recognizer.get_final_result())

    recognizer.reset()

func _process(delta: float) -> void:
    if self.player.stream == null || self.player.playing:
        return

    print(\"started playing\")
    self.player.play()

func _on_speech_recognizer_result(data: Dictionary) -> void:
    print(data)

func _on_speech_recognizer_partial_result(data: Dictionary) -> void:
    print(data)

func _on_speech_recognizer_final_result(data: Dictionary) -> void:
    print(data)
"

[sub_resource type="AudioStreamMicrophone" id="AudioStreamMicrophone_pqcnc"]

[node name="Root" type="Node3D"]
script = SubResource("GDScript_mc2fg")

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = SubResource("AudioStreamMicrophone_pqcnc")
bus = &"Record"

[node name="SpeechRecognizer" type="SpeechRecognizer" parent="."]
recording_bus_name = &"Record"
vosk_model = ExtResource("1_bqtus")

[connection signal="final_result" from="SpeechRecognizer" to="." method="_on_speech_recognizer_final_result"]
[connection signal="partial_result" from="SpeechRecognizer" to="." method="_on_speech_recognizer_partial_result"]
[connection signal="result" from="SpeechRecognizer" to="." method="_on_speech_recognizer_result"]
